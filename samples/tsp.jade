extends layouts/layout

block content
  script(src='tsp.js')
  script(src='util/histogram.js')
  script(src='util/progress.js')
  script
    $(function() { $('#resolve').click() })
  style
    :stylus

  h1 Travelling Salesman Problem Resolver

  form
    h2 Problem Parameter:
    .input
      label Number of Cities
      select#cities(name='cities')
        - for i in [5, 10, 11, 12, 13, 14, 15, 20, 100, 1000]
          - if (i == 20)
            option(value="cities_#{i}" selected)= i
          - else
            option(value="cities_#{i}")= i

    h2 GA Parameter:
    .input
      label Number of Popuration
      input#N(type='number' value='300')

    .input
      label Maximum Generation
      input#G(type='number' value='500')

    br
    .input
      label Crossover
      select#Fc
        option OX(1)
        option(selected) OX(2)
        option CX()
        option PMX(1)
        option PMX(2)
    .input
      label Rate
      input#Pc(type='number' value='100.0')
      | %

    .input
      label Mutation
      select#Fm
        option exchange()
        option(selected) inversion()
    .input
      label Rate
      input#Pm(type='number' value='10.0')
      | %

    .input
      button#resolve Resolve
      button#terminate Terminate

  div#progress
    svg#map
    svg#histogram

  script
    :coffee
      progress = new Progress '#progress'

      class TravelMap extends DrawingArea
        constructor: ->
          super
          @map = @svg.append 'g'
            .attr
              class: 'cities'
          @route = @svg.append 'path'
            .attr
              class: 'route'
              fill: 'none'
          @viewBox.update()

        size: ->
          {width, height} = super
          width: width = Math.min width, height
          height: width

        setup: (data)->
          {min, max} = data.params.position
          @cities = data.cities

          radius = 5
          margin = radius
          @scale = d3.scale.linear()
            .domain [min, max]
            .range [margin, @viewBox.width - margin]

          @map.selectAll '.city'
            .remove()
          @map.selectAll '.city'
            .data @cities
            .enter()
            .append 'circle'
            .attr
               class: 'city'
               cx: (d)=> @scale d.x
               cy: (d)=> @scale d.y
               r: radius

        update: (popuration)->
          path = d3.svg.line()
            .x (d)=> @scale @cities[d].x
            .y (d)=> @scale @cities[d].y

          @route.attr
            d: -> path popuration.best.route()

      class Chart extends Histogram
        constructor: ->
          @map = new TravelMap '#map'
          @histogram = new Histogram '#histogram'

        setup: (data)->
          @map.setup data
          @histogram.viewBox.update
            height: $('#N').val() / 10
          @histogram.setup [150, data.cities.length * 50], (d)-> d.totalDistance

        update: (popuration)->
          @map.update popuration
          @histogram.update popuration

      chart = new Chart

      tsp = undefined

      $('#resolve').on 'click', (e)->
        e.preventDefault()
        $.getJSON "data/#{$('#cities').val()}.json", (data)->
          console.log data.params, data.cities.length
          chart.setup data
          tsp?.terminate()
          tsp = new TSP data.cities
            .on 'reproduct', (popuration)->
              console.log 'reproduct', popuration.dump()
              progress.update popuration
              chart.update popuration
            .resolve
              N: parseInt $('#N').val()
              G: parseInt $('#G').val()
              Fc: $('#Fc').val()
              Pc: $('#Pc').val() / 100
              Fm: $('#Fm').val()
              Pm: $('#Pm').val() / 100
              #intervalMillis: 1000
            , (result, popuration)->
              console.log 'finish', popuration.dump()
              console.log result.itemNumbers
              console.log result.dump()

      $('#terminate').on 'click', (e)->
        e.preventDefault()
        tsp?.terminate()
        tsp = undefined

      GA.Popuration::dump = ->
        "#{@generationNumber}" +
          ", best: #{@best.fitness.toFixed 3}" +
          ", worst: #{@worst.fitness.toFixed 3}" +
          ", ave: #{@fitness.average().toFixed 3}"
